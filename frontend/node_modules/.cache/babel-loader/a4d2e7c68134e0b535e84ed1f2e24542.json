{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05DC\\u05D3\\u05D3\\\\Desktop\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\dynamic-cmps\\\\task-date.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\n// import dateFormat from 'dateformat';\n\nimport { DatePicker, TimePicker, DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { saveTask } from '../../store/board.actions';\nimport { useDispatch } from 'react-redux';\nimport { utilService } from '../../services/util.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskDate({\n  board,\n  group,\n  task,\n  setDynamicType\n}) {\n  _s();\n\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const dispatch = useDispatch();\n\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  const onSetDate = ev => {\n    ev.preventDefault();\n    const newDueDate = {\n      date: Date.parse(selectedDate),\n      dateToDisplay: utilService.getDateToDisplay(Date.parse(selectedDate)),\n      isDone: false\n    };\n    task.dueDate = newDueDate;\n    const newTask = { ...task,\n      dueDate: newDueDate\n    };\n    dispatch(saveTask(board.id, group.id, newTask));\n    setDynamicType('');\n  };\n\n  const onRemoveDate = ev => {\n    ev.preventDefault();\n    task.dueDate = null;\n    dispatch(saveTask(board.id, group.id, task));\n    setDynamicType('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      value: selectedDate,\n      onChange: date => handleDateChange(date),\n      variant: \"static\",\n      disableToolbar: true //  disablePast={true}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"set-date-btn\",\n      onClick: ev => onSetDate(ev),\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"remove-date-btn\",\n      onClick: ev => onRemoveDate(ev),\n      children: \"Remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskDate, \"3Asg7cCFdgnnam7SuDMnuQ+3uhE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TaskDate;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDate\");","map":{"version":3,"sources":["C:/Users/אלדד/Desktop/Sprint4/frontend/src/cmps/dynamic-cmps/task-date.jsx"],"names":["React","useState","DateFnsUtils","DatePicker","TimePicker","DateTimePicker","MuiPickersUtilsProvider","saveTask","useDispatch","utilService","TaskDate","board","group","task","setDynamicType","selectedDate","setSelectedDate","Date","dispatch","handleDateChange","date","onSetDate","ev","preventDefault","newDueDate","parse","dateToDisplay","getDateToDisplay","isDone","dueDate","newTask","id","onRemoveDate"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CAA8C;AAC9C;;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,uBAJF,QAKO,sBALP;AAMA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;;AAEA,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,IAAhB;AAAsBC,EAAAA;AAAtB,CAAlB,EAA0D;AAAA;;AAC/D,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAIgB,IAAJ,EAAD,CAAhD;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,gBAAgB,GAAIC,IAAD,IAAU;AACjCJ,IAAAA,eAAe,CAACI,IAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAIC,EAAD,IAAQ;AACxBA,IAAAA,EAAE,CAACC,cAAH;AACA,UAAMC,UAAU,GAAG;AACjBJ,MAAAA,IAAI,EAAGH,IAAI,CAACQ,KAAL,CAAWV,YAAX,CADU;AAEjBW,MAAAA,aAAa,EAAEjB,WAAW,CAACkB,gBAAZ,CAA8BV,IAAI,CAACQ,KAAL,CAAWV,YAAX,CAA9B,CAFE;AAGjBa,MAAAA,MAAM,EAAE;AAHS,KAAnB;AAKAf,IAAAA,IAAI,CAACgB,OAAL,GAAeL,UAAf;AACA,UAAMM,OAAO,GAAG,EAAC,GAAGjB,IAAJ;AAAUgB,MAAAA,OAAO,EAAEL;AAAnB,KAAhB;AACAN,IAAAA,QAAQ,CAACX,QAAQ,CAAEI,KAAK,CAACoB,EAAR,EAAYnB,KAAK,CAACmB,EAAlB,EAAsBD,OAAtB,CAAT,CAAR;AACAhB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAXD;;AAaA,QAAMkB,YAAY,GAAIV,EAAD,IAAQ;AAC3BA,IAAAA,EAAE,CAACC,cAAH;AACAV,IAAAA,IAAI,CAACgB,OAAL,GAAe,IAAf;AACAX,IAAAA,QAAQ,CAACX,QAAQ,CAAEI,KAAK,CAACoB,EAAR,EAAYnB,KAAK,CAACmB,EAAlB,EAAsBlB,IAAtB,CAAT,CAAR;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GALD;;AAOA,sBACE,QAAC,uBAAD;AAAyB,IAAA,KAAK,EAAEZ,YAAhC;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEa,YAAnB;AACA,MAAA,QAAQ,EAAGK,IAAD,IAASD,gBAAgB,CAACC,IAAD,CADnC;AAEC,MAAA,OAAO,EAAC,QAFT;AAGC,MAAA,cAAc,MAHf,CAIA;;AAJA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAIE,EAAD,IAAQD,SAAS,CAACC,EAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAIA,EAAD,IAAQU,YAAY,CAACV,EAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAzCeZ,Q;UAEGF,W;;;KAFHE,Q","sourcesContent":["import React, { useState } from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\r\n// import dateFormat from 'dateformat';\r\nimport {\r\n  DatePicker,\r\n  TimePicker,\r\n  DateTimePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers';\r\nimport { saveTask } from '../../store/board.actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { utilService } from '../../services/util.service';\r\n\r\nexport function TaskDate({ board, group, task, setDynamicType }) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date())\r\n  const dispatch = useDispatch()\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date)\r\n  }\r\n\r\n  const onSetDate = (ev) => {\r\n    ev.preventDefault()\r\n    const newDueDate = {\r\n      date : Date.parse(selectedDate),\r\n      dateToDisplay: utilService.getDateToDisplay( Date.parse(selectedDate) ),\r\n      isDone: false\r\n    }\r\n    task.dueDate = newDueDate\r\n    const newTask = {...task, dueDate: newDueDate}\r\n    dispatch(saveTask( board.id, group.id, newTask ))\r\n    setDynamicType('')\r\n  }\r\n\r\n  const onRemoveDate = (ev) => {\r\n    ev.preventDefault()\r\n    task.dueDate = null\r\n    dispatch(saveTask( board.id, group.id, task ))\r\n    setDynamicType('')\r\n  }\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <DatePicker value={selectedDate} \r\n      onChange={(date) =>handleDateChange(date)}\r\n       variant=\"static\"\r\n       disableToolbar\r\n      //  disablePast={true}\r\n      />\r\n      <button className='set-date-btn' onClick={ (ev) => onSetDate(ev) }>Save</button>\r\n      <button className='remove-date-btn' onClick={ (ev) => onRemoveDate(ev) }>Remove</button>\r\n\r\n    </MuiPickersUtilsProvider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}