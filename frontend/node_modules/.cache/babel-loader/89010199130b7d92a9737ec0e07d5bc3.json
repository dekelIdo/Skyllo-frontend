{"ast":null,"code":"// import { httpService } from './http.service'\nimport { storageService } from './async-storage.service';\nimport { userService } from './user.service';\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED, SOCKET_EVENT_REVIEW_ABOUT_YOU } from './socket.service';\nimport { getActionRemoveReview, getActionAddReview } from '../store/review.actions';\nimport { store } from '../store/store';\nimport { showSuccessMsg } from '../services/event-bus.service';\nconst reviewChannel = new BroadcastChannel('reviewChannel');\n\n(() => {\n  reviewChannel.addEventListener('message', ev => {\n    store.dispatch(ev.data);\n  });\n  socketService.on(SOCKET_EVENT_REVIEW_ADDED, review => {\n    console.log('GOT from socket', review);\n    store.dispatch(getActionAddReview(review));\n  });\n  socketService.on(SOCKET_EVENT_REVIEW_ABOUT_YOU, review => {\n    showSuccessMsg(`New review about me ${review.txt}`);\n  });\n})();\n\nexport const reviewService = {\n  add,\n  query,\n  remove\n};\n\nfunction query(filterBy) {\n  var queryStr = !filterBy ? '' : `?name=${filterBy.name}&sort=anaAref`; // return httpService.get(`review${queryStr}`)\n\n  return storageService.query('review');\n}\n\nasync function remove(reviewId) {\n  // await httpService.delete(`review/${reviewId}`)\n  await storageService.remove('review', reviewId);\n  reviewChannel.postMessage(getActionRemoveReview(reviewId));\n}\n\nasync function add(review) {\n  // const addedReview = await httpService.post(`review`, review)\n  review.byUser = userService.getLoggedinUser();\n  review.aboutUser = await userService.getById(review.aboutUserId);\n  const addedReview = await storageService.post('review', review);\n  reviewChannel.postMessage(getActionAddReview(addedReview));\n  return addedReview;\n} // This way, we can also subscribe to none-store data change\n// function subscribe(listener) {\n//   reviewChannel.addEventListener('message', listener)\n// }\n// function unsubscribe(listener) {\n//   reviewChannel.removeEventListener('message', listener)\n// }","map":{"version":3,"sources":["C:/Users/Dekel/Desktop/Trellor/Sprint4/frontend/src/services/review.service.js"],"names":["storageService","userService","socketService","SOCKET_EVENT_REVIEW_ADDED","SOCKET_EVENT_REVIEW_ABOUT_YOU","getActionRemoveReview","getActionAddReview","store","showSuccessMsg","reviewChannel","BroadcastChannel","addEventListener","ev","dispatch","data","on","review","console","log","txt","reviewService","add","query","remove","filterBy","queryStr","name","reviewId","postMessage","byUser","getLoggedinUser","aboutUser","getById","aboutUserId","addedReview","post"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,yBAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,aAAT,EAAwBC,yBAAxB,EAAmDC,6BAAnD,QAAwF,kBAAxF;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,yBAA1D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,MAAMC,aAAa,GAAG,IAAIC,gBAAJ,CAAqB,eAArB,CAAtB;;AAEC,CAAC,MAAM;AACND,EAAAA,aAAa,CAACE,gBAAd,CAA+B,SAA/B,EAA2CC,EAAD,IAAQ;AAChDL,IAAAA,KAAK,CAACM,QAAN,CAAeD,EAAE,CAACE,IAAlB;AACD,GAFD;AAGAZ,EAAAA,aAAa,CAACa,EAAd,CAAiBZ,yBAAjB,EAA6Ca,MAAD,IAAY;AACtDC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,MAA/B;AACAT,IAAAA,KAAK,CAACM,QAAN,CAAeP,kBAAkB,CAACU,MAAD,CAAjC;AACD,GAHD;AAIAd,EAAAA,aAAa,CAACa,EAAd,CAAiBX,6BAAjB,EAAiDY,MAAD,IAAY;AAC1DR,IAAAA,cAAc,CAAE,uBAAsBQ,MAAM,CAACG,GAAI,EAAnC,CAAd;AACD,GAFD;AAGD,CAXA;;AAeD,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,GAD2B;AAE3BC,EAAAA,KAF2B;AAG3BC,EAAAA;AAH2B,CAAtB;;AAOP,SAASD,KAAT,CAAeE,QAAf,EAAyB;AACvB,MAAIC,QAAQ,GAAI,CAACD,QAAF,GAAc,EAAd,GAAoB,SAAQA,QAAQ,CAACE,IAAK,eAAzD,CADuB,CAEvB;;AACA,SAAO1B,cAAc,CAACsB,KAAf,CAAqB,QAArB,CAAP;AACD;;AAED,eAAeC,MAAf,CAAsBI,QAAtB,EAAgC;AAC9B;AACA,QAAM3B,cAAc,CAACuB,MAAf,CAAsB,QAAtB,EAAgCI,QAAhC,CAAN;AACAlB,EAAAA,aAAa,CAACmB,WAAd,CAA0BvB,qBAAqB,CAACsB,QAAD,CAA/C;AAGD;;AACD,eAAeN,GAAf,CAAmBL,MAAnB,EAA2B;AACzB;AAEAA,EAAAA,MAAM,CAACa,MAAP,GAAgB5B,WAAW,CAAC6B,eAAZ,EAAhB;AACAd,EAAAA,MAAM,CAACe,SAAP,GAAmB,MAAM9B,WAAW,CAAC+B,OAAZ,CAAoBhB,MAAM,CAACiB,WAA3B,CAAzB;AACA,QAAMC,WAAW,GAAG,MAAMlC,cAAc,CAACmC,IAAf,CAAoB,QAApB,EAA8BnB,MAA9B,CAA1B;AAEAP,EAAAA,aAAa,CAACmB,WAAd,CAA0BtB,kBAAkB,CAAC4B,WAAD,CAA5C;AAEA,SAAOA,WAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { httpService } from './http.service'\r\nimport { storageService } from './async-storage.service'\r\nimport { userService } from './user.service'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED, SOCKET_EVENT_REVIEW_ABOUT_YOU } from './socket.service'\r\nimport { getActionRemoveReview, getActionAddReview } from '../store/review.actions'\r\nimport { store } from '../store/store'\r\nimport { showSuccessMsg } from '../services/event-bus.service'\r\n\r\nconst reviewChannel = new BroadcastChannel('reviewChannel')\r\n\r\n;(() => {\r\n  reviewChannel.addEventListener('message', (ev) => {\r\n    store.dispatch(ev.data)\r\n  })\r\n  socketService.on(SOCKET_EVENT_REVIEW_ADDED, (review) => {\r\n    console.log('GOT from socket', review)\r\n    store.dispatch(getActionAddReview(review))\r\n  })\r\n  socketService.on(SOCKET_EVENT_REVIEW_ABOUT_YOU, (review) => {\r\n    showSuccessMsg(`New review about me ${review.txt}`)\r\n  })\r\n})()\r\n\r\n\r\n\r\nexport const reviewService = {\r\n  add,\r\n  query,\r\n  remove\r\n}\r\n\r\n\r\nfunction query(filterBy) {\r\n  var queryStr = (!filterBy) ? '' : `?name=${filterBy.name}&sort=anaAref`\r\n  // return httpService.get(`review${queryStr}`)\r\n  return storageService.query('review')\r\n}\r\n\r\nasync function remove(reviewId) {\r\n  // await httpService.delete(`review/${reviewId}`)\r\n  await storageService.remove('review', reviewId)\r\n  reviewChannel.postMessage(getActionRemoveReview(reviewId))\r\n\r\n\r\n}\r\nasync function add(review) {\r\n  // const addedReview = await httpService.post(`review`, review)\r\n\r\n  review.byUser = userService.getLoggedinUser()\r\n  review.aboutUser = await userService.getById(review.aboutUserId)\r\n  const addedReview = await storageService.post('review', review)\r\n\r\n  reviewChannel.postMessage(getActionAddReview(addedReview))\r\n\r\n  return addedReview\r\n}\r\n\r\n// This way, we can also subscribe to none-store data change\r\n// function subscribe(listener) {\r\n//   reviewChannel.addEventListener('message', listener)\r\n// }\r\n// function unsubscribe(listener) {\r\n//   reviewChannel.removeEventListener('message', listener)\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}