{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dekel\\\\Desktop\\\\Trellor\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\dynamic-cmps\\\\labels-cmp.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactComponent as EditIcon } from '../../assets/img/edit-icon.svg';\nimport { ReactComponent as LabelExistIcon } from '../../assets/img/label-exist-icon.svg';\nimport { utilService } from '../../services/util.service';\nimport { saveTask } from '../../store/board.actions';\nimport { CreateLabel } from './create-new-label';\nimport { EditLabel } from './edit-label-cmp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LabelsCmp = ({\n  task,\n  group,\n  setDynamicType,\n  setTask,\n  setHideHeader\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardModule.board);\n  const BoardLabels = board.labels;\n  const [isEditLabel, setIsEditLabel] = useState(false);\n  const [isCreateLabel, setIsCreateLabel] = useState(false);\n  const [selectedLabel, setSelectedLabel] = useState('');\n  const user = useSelector(state => state.userModule.user);\n\n  const onChooseLabel = (labelId, ev) => {\n    var _task$labelIds;\n\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (!task.labelIds) task.labelIds = [];\n\n    if (!((_task$labelIds = task.labelIds) !== null && _task$labelIds !== void 0 && _task$labelIds.includes(labelId))) {\n      const newLabelsToTask = [...task.labelIds, labelId];\n      const taskToUpdate = { ...task,\n        labelIds: newLabelsToTask\n      };\n      console.log(taskToUpdate);\n      setTask(taskToUpdate);\n      dispatch(saveTask(board._id, group.id, taskToUpdate, {\n        text: 'choose label',\n        taskTilte: task.title,\n        taskId: task.id,\n        groupId: group.id,\n        user: user\n      }));\n    } else {\n      const newLabelIds = task.labelIds.filter(currLabelId => currLabelId !== labelId);\n      const taskToUpdate = { ...task,\n        labelIds: newLabelIds\n      };\n      setTask(taskToUpdate);\n      dispatch(saveTask(board._id, group.id, taskToUpdate, 'deleted task'));\n    }\n  };\n\n  const onChooseLabelToEdit = (label, ev) => {\n    console.log('label:', label);\n    ev.preventDefault();\n    ev.stopPropagation();\n    setIsEditLabel(!isEditLabel);\n    setHideHeader(false);\n    setSelectedLabel(label);\n  };\n\n  const labelExistIcon = labelId => {\n    var _task$labelIds2;\n\n    const exist = task === null || task === void 0 ? void 0 : (_task$labelIds2 = task.labelIds) === null || _task$labelIds2 === void 0 ? void 0 : _task$labelIds2.find(id => {\n      return labelId === id;\n    });\n    if (exist) return /*#__PURE__*/_jsxDEV(LabelExistIcon, {\n      className: \"label-exist-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 27\n    }, this);\n  };\n\n  const onChooseCreateLabel = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    setIsCreateLabel(!isCreateLabel);\n  };\n\n  const onHoverLabel = (ev, color) => {\n    ev.target.style.background = utilService.lightenDarkenColor(color, -10);\n  };\n\n  const onLeaveHoverLabel = (ev, color) => {\n    ev.target.style.background = color;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [!isEditLabel && !isCreateLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"labels-cmp\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Labels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"labels-list\",\n          children: board.labels.map(label => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  backgroundColor: label.color\n                },\n                onMouseEnter: ev => onHoverLabel(ev, label.color),\n                onMouseLeave: ev => onLeaveHoverLabel(ev, label.color),\n                className: \"label-color-box\",\n                onClick: ev => onChooseLabel(label.id, ev),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"labels-details-mini-color\",\n                  style: {\n                    backgroundColor: utilService.lightenDarkenColor(label.color, -25)\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 37\n                }, this), label.title ? label.title : '', labelExistIcon(label.id)]\n              }, label.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-label-btn\",\n                children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                  onClick: ev => onChooseLabelToEdit(label, ev)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: ev => onChooseCreateLabel(ev),\n          className: \"create-new-label-btn\",\n          children: \"Create a new label\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 44\n    }, this), isEditLabel && /*#__PURE__*/_jsxDEV(EditLabel, {\n      group: group,\n      task: task,\n      setIsEditLabel: setIsEditLabel,\n      selectedLabel: selectedLabel,\n      setDynamicType: setDynamicType,\n      setTask: setTask,\n      setHideHeader: setHideHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), isCreateLabel && /*#__PURE__*/_jsxDEV(CreateLabel, {\n      group: group,\n      board: board,\n      setHideHeader: setHideHeader,\n      setIsCreateLabel: setIsCreateLabel,\n      setDynamicType: setDynamicType,\n      setTask: setTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LabelsCmp, \"bHQR44qXkpZ0zlblOX1QDp72Dwo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LabelsCmp;\n\nvar _c;\n\n$RefreshReg$(_c, \"LabelsCmp\");","map":{"version":3,"sources":["C:/Users/Dekel/Desktop/Trellor/Sprint4/frontend/src/cmps/dynamic-cmps/labels-cmp.jsx"],"names":["useState","useDispatch","useSelector","ReactComponent","EditIcon","LabelExistIcon","utilService","saveTask","CreateLabel","EditLabel","LabelsCmp","task","group","setDynamicType","setTask","setHideHeader","dispatch","board","state","boardModule","BoardLabels","labels","isEditLabel","setIsEditLabel","isCreateLabel","setIsCreateLabel","selectedLabel","setSelectedLabel","user","userModule","onChooseLabel","labelId","ev","preventDefault","stopPropagation","labelIds","includes","newLabelsToTask","taskToUpdate","console","log","_id","id","text","taskTilte","title","taskId","groupId","newLabelIds","filter","currLabelId","onChooseLabelToEdit","label","labelExistIcon","exist","find","onChooseCreateLabel","onHoverLabel","color","target","style","background","lightenDarkenColor","onLeaveHoverLabel","map","backgroundColor"],"mappings":"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","sourcesContent":["\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ReactComponent as EditIcon } from '../../assets/img/edit-icon.svg'\r\nimport { ReactComponent as LabelExistIcon } from '../../assets/img/label-exist-icon.svg'\r\nimport { utilService } from '../../services/util.service'\r\nimport { saveTask } from '../../store/board.actions'\r\nimport { CreateLabel } from './create-new-label'\r\nimport { EditLabel } from './edit-label-cmp'\r\n\r\n\r\n\r\nexport const LabelsCmp = ({ task, group, setDynamicType, setTask, setHideHeader }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const board = useSelector(state => state.boardModule.board)\r\n    const BoardLabels = board.labels\r\n    const [isEditLabel, setIsEditLabel] = useState(false)\r\n    const [isCreateLabel, setIsCreateLabel] = useState(false)\r\n    const [selectedLabel, setSelectedLabel] = useState('')\r\n    const user = useSelector(state => state.userModule.user)\r\n\r\n    const onChooseLabel = (labelId, ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        if (!task.labelIds) task.labelIds = []\r\n        if (!task.labelIds?.includes(labelId)) {\r\n            const newLabelsToTask = [...task.labelIds, labelId]\r\n            const taskToUpdate = { ...task, labelIds: newLabelsToTask }\r\n            console.log(taskToUpdate)\r\n            setTask(taskToUpdate)\r\n            dispatch(saveTask(board._id, group.id, taskToUpdate, { text: 'choose label', taskTilte: task.title, taskId: task.id, groupId: group.id, user: user }))\r\n        }\r\n\r\n        else {\r\n            const newLabelIds = task.labelIds.filter(currLabelId => currLabelId !== labelId)\r\n            const taskToUpdate = { ...task, labelIds: newLabelIds }\r\n            setTask(taskToUpdate)\r\n\r\n            dispatch(saveTask(board._id, group.id, taskToUpdate, 'deleted task'))\r\n        }\r\n    }\r\n\r\n    const onChooseLabelToEdit = (label, ev) => {\r\n        console.log('label:', label)\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n\r\n        setIsEditLabel(!isEditLabel)\r\n        setHideHeader(false)\r\n        setSelectedLabel(label)\r\n    }\r\n\r\n    const labelExistIcon = (labelId) => {\r\n        const exist = task?.labelIds?.find(id => {\r\n            return labelId === id\r\n        })\r\n        if (exist) return <LabelExistIcon className='label-exist-icon' />\r\n    }\r\n\r\n    const onChooseCreateLabel = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n\r\n        setIsCreateLabel(!isCreateLabel)\r\n    }\r\n\r\n    const onHoverLabel = (ev, color) => {\r\n        ev.target.style.background = utilService.lightenDarkenColor(color, -10);\r\n    }\r\n\r\n    const onLeaveHoverLabel = (ev, color) => {\r\n        ev.target.style.background = color\r\n    }\r\n\r\n    return <section>\r\n        {!isEditLabel && !isCreateLabel && <div>\r\n            <section className=\"labels-cmp\">\r\n                <h4>Labels</h4>\r\n                <div className=\"labels-list\">\r\n                    {board.labels.map(label => {\r\n                        return (\r\n                            <div className=\"label-container\">\r\n                                <div style={{ backgroundColor: label.color }}\r\n                                    key={label.id}\r\n                                    onMouseEnter={(ev) => onHoverLabel(ev, label.color)}\r\n                                    onMouseLeave={(ev) => onLeaveHoverLabel(ev, label.color)}\r\n                                    className='label-color-box' onClick={(ev) => onChooseLabel(label.id, ev)}>\r\n                                    <div className='labels-details-mini-color' style={{ backgroundColor: utilService.lightenDarkenColor(label.color, -25) }}></div>\r\n                                    {label.title ? label.title : ''}\r\n                                    {labelExistIcon(label.id)}\r\n                                </div>\r\n                                <button className='edit-label-btn'>\r\n                                    <EditIcon onClick={(ev) => onChooseLabelToEdit(label, ev)} />\r\n                                </button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <button onClick={(ev) => onChooseCreateLabel(ev)} className='create-new-label-btn'>\r\n                    Create a new label\r\n                </button>\r\n            </section>\r\n        </div>}\r\n\r\n        {isEditLabel &&\r\n            <EditLabel\r\n                group={group}\r\n                task={task}\r\n                setIsEditLabel={setIsEditLabel}\r\n                selectedLabel={selectedLabel}\r\n                setDynamicType={setDynamicType}\r\n                setTask={setTask}\r\n                setHideHeader={setHideHeader} />\r\n        }\r\n\r\n        {isCreateLabel &&\r\n            <CreateLabel\r\n                group={group}\r\n                board={board}\r\n                setHideHeader={setHideHeader}\r\n                setIsCreateLabel={setIsCreateLabel}\r\n                setDynamicType={setDynamicType}\r\n                setTask={setTask} />\r\n        }\r\n    </section>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}