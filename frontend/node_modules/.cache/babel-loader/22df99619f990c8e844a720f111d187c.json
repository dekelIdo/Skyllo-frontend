{"ast":null,"code":"import { boardService } from \"./board.service\";\nimport { userService } from \"./user.service\";\nexport const storageService = {\n  query,\n  get,\n  post,\n  put,\n  remove,\n  postMany\n};\n\nfunction query(entityType, delay = 600) {\n  var entities = JSON.parse(localStorage.getItem(entityType));\n\n  if (!entities && entityType === 'board') {\n    entities = boardService.getBoard();\n\n    _save(entityType, entities);\n  }\n\n  if (!entities && entityType === 'user') {\n    entities = boardService.getGUsers();\n\n    _save(entityType, entities);\n  }\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // reject('OOOOPs')\n      resolve(entities);\n    }, delay);\n  }); // return Promise.resolve(entities)\n}\n\nfunction get(entityType, entityId) {\n  return query(entityType).then(entities => entities.find(entity => entity._id === entityId));\n}\n\nfunction post(entityType, newEntity) {\n  newEntity._id = _makeId();\n  return query(entityType).then(entities => {\n    console.log('entitiesssssssss:', entities);\n    entities.push(newEntity);\n\n    _save(entityType, entities);\n\n    return newEntity;\n  });\n}\n\nfunction put(entityType, updatedEntity) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\n    entities.splice(idx, 1, updatedEntity);\n\n    _save(entityType, entities);\n\n    return updatedEntity;\n  });\n}\n\nfunction remove(entityType, entityId) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === entityId);\n    entities.splice(idx, 1);\n\n    _save(entityType, entities);\n  });\n}\n\nfunction _save(entityType, entities) {\n  localStorage.setItem(entityType, JSON.stringify(entities));\n}\n\nfunction _makeId(length = 5) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\nfunction postMany(entityType, newEntities) {\n  return query(entityType).then(entities => {\n    newEntities = newEntities.map(entity => ({ ...entity,\n      _id: _makeId()\n    }));\n    entities.push(...newEntities);\n\n    _save(entityType, entities);\n\n    return entities;\n  });\n}","map":{"version":3,"sources":["C:/Users/אלדד/Desktop/Sprint4/frontend/src/services/async-storage.service.js"],"names":["boardService","userService","storageService","query","get","post","put","remove","postMany","entityType","delay","entities","JSON","parse","localStorage","getItem","getBoard","_save","getGUsers","Promise","resolve","reject","setTimeout","entityId","then","find","entity","_id","newEntity","_makeId","console","log","push","updatedEntity","idx","findIndex","splice","setItem","stringify","length","text","possible","i","charAt","Math","floor","random","newEntities","map"],"mappings":"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","sourcesContent":["import { boardService } from \"./board.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\nexport const storageService = {\r\n    query,\r\n    get,\r\n    post,\r\n    put,\r\n    remove,\r\n    postMany,\r\n}\r\n\r\nfunction query(entityType, delay = 600) {\r\n    var entities = JSON.parse(localStorage.getItem(entityType))\r\n    if (!entities && entityType === 'board') {\r\n        entities = boardService.getBoard()\r\n        _save(entityType, entities)\r\n    }\r\n\r\n    if (!entities && entityType === 'user') {\r\n        entities = boardService.getGUsers()\r\n        _save(entityType, entities)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            // reject('OOOOPs')\r\n            resolve(entities)\r\n        }, delay)\r\n    })\r\n    // return Promise.resolve(entities)\r\n}\r\n\r\nfunction get(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => entities.find(entity => entity._id === entityId))\r\n}\r\n\r\nfunction post(entityType, newEntity) {\r\n    newEntity._id = _makeId()\r\n    return query(entityType)\r\n        .then(entities => {\r\n            console.log('entitiesssssssss:', entities)\r\n\r\n            entities.push(newEntity)\r\n            _save(entityType, entities)\r\n            return newEntity\r\n        })\r\n}\r\n\r\nfunction put(entityType, updatedEntity) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === updatedEntity._id)\r\n            entities.splice(idx, 1, updatedEntity)\r\n            _save(entityType, entities)\r\n            return updatedEntity\r\n        })\r\n}\r\n\r\nfunction remove(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === entityId)\r\n            entities.splice(idx, 1)\r\n            _save(entityType, entities)\r\n        })\r\n}\r\n\r\nfunction _save(entityType, entities) {\r\n    localStorage.setItem(entityType, JSON.stringify(entities))\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = ''\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text\r\n}\r\n\r\nfunction postMany(entityType, newEntities) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            newEntities = newEntities.map(entity => ({ ...entity, _id: _makeId() }))\r\n            entities.push(...newEntities)\r\n            _save(entityType, entities)\r\n            return entities\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}