{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05DC\\u05D3\\u05D3\\\\Desktop\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\dynamic-cmps\\\\edit-label-cmp.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { ReactComponent as CloseDynamicCmp } from '../../assets/img/close-task-form.svg';\nimport { ReactComponent as GoBackIcon } from '../../assets/img/go-back-label-icon.svg';\nimport { ReactComponent as ChosenColorIcon } from '../../assets/img/label-exist-icon.svg';\nimport { detailsColorsConsts } from '../../const/board-list-consts';\nimport { labelsColors } from '../../const/board-list-consts';\nimport { utilService } from '../../services/util.service';\nimport { updateBoard } from '../../store/board.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditLabel = ({\n  setDynamicType,\n  setIsEditLabel,\n  selectedLabel,\n  setTask,\n  setHideHeader,\n  group\n}) => {\n  _s();\n\n  const board = useSelector(state => state.boardModule.board);\n  const params = useParams();\n  const taskId = params.taskId;\n  const groupId = params.groupId; // const currGroup = board.groups.find(group => group.id === groupId)\n\n  const currTask = group.tasks.find(task => task.id === taskId);\n  const [editInputText, setEditInputText] = useState(selectedLabel.title);\n  const [selectedEditColor, setSelectedEditColor] = useState(selectedLabel.color);\n  const dispatch = useDispatch();\n\n  const onLabelSave = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const labelToSave = {\n      id: selectedLabel.id,\n      title: editInputText,\n      color: selectedEditColor\n    };\n    const boardLabelIdx = board.labels.findIndex(boardLabel => {\n      return boardLabel.id === labelToSave.id;\n    }); //    const newBoard =  board.labels.splice([boardLabelIdx], 1, labelToSave);\n    // const newLabelsToTask = [...task.labelIds, labelId]\n    // const taskToUpdate = { ...task, labelIds: newLabelsToTask }\n    // const newLabelsToTask = [...currTask.labelIds, selectedLabel.id]\n    // const taskToUpdate = { ...currTask, labelIds: newLabelsToTask }\n    // setTask(taskToUpdate)\n\n    const boardToUpdate = structuredClone(board);\n    boardToUpdate.labels.splice([boardLabelIdx], 1, labelToSave);\n    dispatch(updateBoard(boardToUpdate));\n    setIsEditLabel(false);\n    setHideHeader(true);\n  };\n\n  const onDeleteLabel = ev => {\n    ev.preventDefault();\n    const boardToUpdate = structuredClone(board); // boardToUpdate.labels = board.labels.filter(label => label.id !== selectedLabel.id)\n    // console.log('selectedLabel:', selectedLabel)\n    // const tasksWithLabelToDelete = board.groups.map(group=>{\n    //  return  group.tasks.map(task=>{\n    //         return task.labelIds.filter(labelId => labelId !== selectedLabel.id)\n    //     })\n    // })\n    // console.log('tasksWithLabelToDelete:', tasksWithLabelToDelete)\n\n    const newLabelIds = currTask.labelIds.filter(labelId => labelId !== selectedLabel.id);\n    const updatedTask = { ...currTask,\n      labelIds: newLabelIds\n    }; // const groupIdx = board.groups.findIndex(currGroup => currGroup === group.id)\n\n    const taskIdx = group.tasks.findIndex(task => currTask.id === task.id);\n    group.tasks.splice(taskIdx, 1, updatedTask);\n    boardToUpdate.labels = boardToUpdate.labels.filter(label => label.id !== selectedLabel.id);\n    group.tasks.splice(taskIdx, 1, updatedTask);\n    dispatch(updateBoard(boardToUpdate)); // setTask(updatedTask)\n\n    setIsEditLabel(false);\n    setHideHeader(true);\n  };\n\n  const handleChangeLabelText = ev => {\n    const text = ev.target.value;\n    setEditInputText(text);\n  };\n\n  const handleChangeLabelColor = (color, ev) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    setSelectedEditColor(color);\n  };\n\n  const selectedColorIcon = color => {\n    if (color === selectedEditColor) return /*#__PURE__*/_jsxDEV(ChosenColorIcon, {\n      className: \"color-chosen-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 49\n    }, this);\n  };\n\n  const onGoBack = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    setIsEditLabel(false);\n    setHideHeader(true);\n  };\n\n  const onHoverLabel = (ev, color) => {\n    ev.target.style.background = utilService.lightenDarkenColor(color, -10);\n  };\n\n  const onLeaveHoverLabel = (ev, color) => {\n    ev.target.style.background = color;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"edit-label-cmp\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"dynamic-cmp-header\",\n      children: ['Edit label', /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-edit-label-modal\",\n        children: /*#__PURE__*/_jsxDEV(CloseDynamicCmp, {\n          onClick: () => setDynamicType('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-back-label-edit\",\n        children: /*#__PURE__*/_jsxDEV(GoBackIcon, {\n          onClick: onGoBack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"edit-labels-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"edit-label-form\",\n        onSubmit: ev => onLabelSave(ev),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChangeLabelText,\n          type: \"text\",\n          value: editInputText,\n          id: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Select a color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"edit-labels-color-container\",\n          children: labelsColors.map(color => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label-edit-color-box\",\n              onMouseEnter: ev => onHoverLabel(ev, color),\n              onMouseLeave: ev => onLeaveHoverLabel(ev, color),\n              onClick: ev => handleChangeLabelColor(color, ev),\n              style: {\n                backgroundColor: color\n              },\n              children: selectedColorIcon(color)\n            }, color, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"edit-label-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-new-label-btn\",\n            children: \"Save label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: onDeleteLabel,\n            className: \"delete-label-btn\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 12\n  }, this);\n};\n\n_s(EditLabel, \"qvt85Fv9SAKDFqcimujS1ogbMLM=\", false, function () {\n  return [useSelector, useParams, useDispatch];\n});\n\n_c = EditLabel;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditLabel\");","map":{"version":3,"sources":["C:/Users/אלדד/Desktop/Sprint4/frontend/src/cmps/dynamic-cmps/edit-label-cmp.jsx"],"names":["useState","useDispatch","useSelector","useParams","ReactComponent","CloseDynamicCmp","GoBackIcon","ChosenColorIcon","detailsColorsConsts","labelsColors","utilService","updateBoard","EditLabel","setDynamicType","setIsEditLabel","selectedLabel","setTask","setHideHeader","group","board","state","boardModule","params","taskId","groupId","currTask","tasks","find","task","id","editInputText","setEditInputText","title","selectedEditColor","setSelectedEditColor","color","dispatch","onLabelSave","ev","preventDefault","stopPropagation","labelToSave","boardLabelIdx","labels","findIndex","boardLabel","boardToUpdate","structuredClone","splice","onDeleteLabel","newLabelIds","labelIds","filter","labelId","updatedTask","taskIdx","label","handleChangeLabelText","text","target","value","handleChangeLabelColor","selectedColorIcon","onGoBack","onHoverLabel","style","background","lightenDarkenColor","onLeaveHoverLabel","map","backgroundColor"],"mappings":"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","sourcesContent":["\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom';\r\nimport { ReactComponent as CloseDynamicCmp } from '../../assets/img/close-task-form.svg'\r\nimport { ReactComponent as GoBackIcon } from '../../assets/img/go-back-label-icon.svg'\r\nimport { ReactComponent as ChosenColorIcon } from '../../assets/img/label-exist-icon.svg'\r\nimport { detailsColorsConsts } from '../../const/board-list-consts';\r\nimport { labelsColors } from '../../const/board-list-consts';\r\nimport { utilService } from '../../services/util.service';\r\nimport { updateBoard } from '../../store/board.actions';\r\n\r\nexport const EditLabel = ({ setDynamicType, setIsEditLabel, selectedLabel, setTask, setHideHeader, group }) => {\r\n    const board = useSelector(state => state.boardModule.board)\r\n\r\n    const params = useParams()\r\n    const taskId = params.taskId\r\n    const groupId = params.groupId\r\n\r\n    // const currGroup = board.groups.find(group => group.id === groupId)\r\n    const currTask = group.tasks.find(task => task.id === taskId)\r\n\r\n    const [editInputText, setEditInputText] = useState(selectedLabel.title)\r\n    const [selectedEditColor, setSelectedEditColor] = useState(selectedLabel.color)\r\n    const dispatch = useDispatch()\r\n\r\n    const onLabelSave = (ev) => {\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n\r\n        const labelToSave = {\r\n            id: selectedLabel.id,\r\n            title: editInputText,\r\n            color: selectedEditColor\r\n        }\r\n\r\n        const boardLabelIdx = board.labels.findIndex(boardLabel => {\r\n            return boardLabel.id === labelToSave.id\r\n        })\r\n        //    const newBoard =  board.labels.splice([boardLabelIdx], 1, labelToSave);\r\n        // const newLabelsToTask = [...task.labelIds, labelId]\r\n        // const taskToUpdate = { ...task, labelIds: newLabelsToTask }\r\n        // const newLabelsToTask = [...currTask.labelIds, selectedLabel.id]\r\n        // const taskToUpdate = { ...currTask, labelIds: newLabelsToTask }\r\n        // setTask(taskToUpdate)\r\n\r\n        const boardToUpdate = structuredClone(board)\r\n        boardToUpdate.labels.splice([boardLabelIdx], 1, labelToSave);\r\n        dispatch(updateBoard(boardToUpdate))\r\n\r\n        setIsEditLabel(false)\r\n        setHideHeader(true)\r\n    }\r\n\r\n    const onDeleteLabel = (ev) => {\r\n        ev.preventDefault()\r\n        const boardToUpdate = structuredClone(board)\r\n\r\n        // boardToUpdate.labels = board.labels.filter(label => label.id !== selectedLabel.id)\r\n        // console.log('selectedLabel:', selectedLabel)\r\n\r\n        // const tasksWithLabelToDelete = board.groups.map(group=>{\r\n        //  return  group.tasks.map(task=>{\r\n        //         return task.labelIds.filter(labelId => labelId !== selectedLabel.id)\r\n        //     })\r\n        // })\r\n        // console.log('tasksWithLabelToDelete:', tasksWithLabelToDelete)\r\n\r\n        const newLabelIds = currTask.labelIds.filter(labelId => labelId !== selectedLabel.id)\r\n        const updatedTask = { ...currTask, labelIds: newLabelIds }\r\n\r\n        // const groupIdx = board.groups.findIndex(currGroup => currGroup === group.id)\r\n        const taskIdx = group.tasks.findIndex(task => currTask.id === task.id)\r\n\r\n        group.tasks.splice(taskIdx, 1, updatedTask)\r\n        boardToUpdate.labels = boardToUpdate.labels.filter(label => label.id !== selectedLabel.id)\r\n        group.tasks.splice(taskIdx, 1, updatedTask)\r\n\r\n        dispatch(updateBoard(boardToUpdate))\r\n\r\n        // setTask(updatedTask)\r\n        setIsEditLabel(false)\r\n        setHideHeader(true)\r\n    }\r\n\r\n    const handleChangeLabelText = (ev) => {\r\n        const text = ev.target.value\r\n        setEditInputText(text)\r\n    }\r\n\r\n    const handleChangeLabelColor = (color, ev) => {\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n\r\n        setSelectedEditColor(color)\r\n    }\r\n\r\n    const selectedColorIcon = (color) => {\r\n        if (color === selectedEditColor) return <ChosenColorIcon className='color-chosen-icon' />\r\n    }\r\n\r\n    const onGoBack = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n\r\n        setIsEditLabel(false)\r\n        setHideHeader(true)\r\n    }\r\n    const onHoverLabel = (ev, color) => {\r\n        ev.target.style.background = utilService.lightenDarkenColor(color, -10);\r\n    }\r\n\r\n    const onLeaveHoverLabel = (ev, color) => {\r\n        ev.target.style.background = color\r\n    }\r\n\r\n    return <section className=\"edit-label-cmp\">\r\n        <section className=\"dynamic-cmp-header\">{'Edit label'}\r\n            <button className='close-edit-label-modal'>\r\n                <CloseDynamicCmp onClick={() => setDynamicType('')} />\r\n            </button>\r\n            <button className='go-back-label-edit'>\r\n                <GoBackIcon onClick={onGoBack} />\r\n            </button>\r\n        </section>\r\n\r\n        <section className='edit-labels-modal'>\r\n            <h4>Name</h4>\r\n            <form className='edit-label-form' onSubmit={(ev)=>onLabelSave(ev)}>\r\n                <input onChange={handleChangeLabelText} type='text' value={editInputText} id='' />\r\n                <h4>Select a color</h4>\r\n                <section className='edit-labels-color-container'>\r\n                    {labelsColors.map(color => {\r\n                        return <div className='label-edit-color-box'\r\n                            onMouseEnter={(ev) => onHoverLabel(ev, color)}\r\n                            onMouseLeave={(ev) => onLeaveHoverLabel(ev, color)}\r\n                            onClick={(ev) => handleChangeLabelColor(color, ev)}\r\n                            key={color}\r\n                            style={{ backgroundColor: color }}>\r\n                            {selectedColorIcon(color)}\r\n                        </div>\r\n                    })}\r\n\r\n                </section>\r\n                <section className='edit-label-btns'>\r\n                    <button className='create-new-label-btn'>\r\n                        Save label\r\n                    </button>\r\n                    <span onClick={onDeleteLabel} className='delete-label-btn'>\r\n                        Delete\r\n                    </span>\r\n                </section>\r\n            </form>\r\n\r\n        </section>\r\n\r\n    </section>\r\n}"]},"metadata":{},"sourceType":"module"}