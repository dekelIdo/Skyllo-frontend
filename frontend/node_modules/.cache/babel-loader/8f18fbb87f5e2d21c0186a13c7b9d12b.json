{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dekel\\\\Desktop\\\\Trellor\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\task-list.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { boardService } from \"../services/board.service\";\nimport { TaskDetails } from \"./task-details\";\nimport { TaskPreview } from \"./task-preview\";\nimport { ReactComponent as CloseTask } from '../assets/img/close-task-form.svg';\nimport { saveTask } from \"../store/board.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskList({\n  group\n}) {\n  _s();\n\n  const board = useSelector(state => state.boardModule.board);\n  const user = useSelector(state => state.userModule.user);\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  const dispatch = useDispatch();\n\n  const onAddTask = ev => {\n    ev.preventDefault();\n    const title = ev.target[0].value;\n    if (!title) return;\n    const task = {\n      title\n    };\n    dispatch(saveTask(board._id, group.id, task, {\n      text: 'added task',\n      taskTilte: task.title,\n      groupId: group.id,\n      user: user\n    }));\n    ev.target[0].value = '';\n    setIsAddingTask(false);\n  };\n\n  const addingTaskShown = () => {\n    setIsAddingTask(!isAddingTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-container\",\n    children: group.tasks.map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: `${group.id}/${task.id}`,\n        children: /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: task.id,\n          index: index,\n          children: provided => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              index: index,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              ref: provided.innerRef,\n              children: /*#__PURE__*/_jsxDEV(TaskPreview, {\n                task: task,\n                group: group\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 41\n              }, this)\n            }, task.id + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 45\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n} // {taskLabels && !task.cover?.isFullCover &&\n\n_s(TaskList, \"KY/O6HSz1dkM9uehBHuQxLsFyEs=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["C:/Users/Dekel/Desktop/Trellor/Sprint4/frontend/src/cmps/task-list.jsx"],"names":["useRef","useState","Draggable","useDispatch","useSelector","Link","boardService","TaskDetails","TaskPreview","ReactComponent","CloseTask","saveTask","TaskList","group","board","state","boardModule","user","userModule","isAddingTask","setIsAddingTask","dispatch","onAddTask","ev","preventDefault","title","target","value","task","_id","id","text","taskTilte","groupId","addingTaskShown","tasks","map","index","provided","draggableProps","dragHandleProps","innerRef"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { boardService } from \"../services/board.service\";\r\nimport { TaskDetails } from \"./task-details\";\r\nimport { TaskPreview } from \"./task-preview\";\r\nimport { ReactComponent as CloseTask } from '../assets/img/close-task-form.svg'\r\nimport { saveTask } from \"../store/board.actions\";\r\n\r\n\r\nexport function TaskList({ group }) {\r\n    const board = useSelector(state => state.boardModule.board)\r\n    const user = useSelector(state => state.userModule.user)\r\n\r\n    const [isAddingTask, setIsAddingTask] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddTask = ev => {\r\n        ev.preventDefault()\r\n        const title = ev.target[0].value\r\n        if (!title) return\r\n        const task = {\r\n            title\r\n        }\r\n\r\n        dispatch(saveTask(board._id, group.id, task, { text: 'added task', taskTilte: task.title, groupId: group.id, user: user }))\r\n        ev.target[0].value = ''\r\n        setIsAddingTask(false)\r\n    }\r\n    const addingTaskShown = () => {\r\n        setIsAddingTask(!isAddingTask)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"list-container\">\r\n            {group.tasks.map((task, index) => {\r\n                return (\r\n                    <Link to={`${group.id}/${task.id}`} key={task.id}>\r\n                        <Draggable draggableId={task.id} index={index}>\r\n\r\n                                {(provided) => {\r\n                                    return (<div key={task.id+index} index={index}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef} >\r\n                                        <TaskPreview\r\n                                            task={task}\r\n                                            group={group}\r\n                                            \r\n                                        >\r\n                                        </TaskPreview>\r\n                                        \r\n                                    </div>)\r\n                                }}\r\n                            </Draggable>\r\n\r\n                        \r\n                    </Link>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n// {taskLabels && !task.cover?.isFullCover &&"]},"metadata":{},"sourceType":"module"}