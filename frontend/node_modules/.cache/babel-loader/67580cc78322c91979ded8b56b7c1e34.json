{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05DC\\u05D3\\u05D3\\\\Desktop\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\dynamic-cmps\\\\create-new-label.jsx\",\n    _s = $RefreshSig$();\n\nimport { ReactComponent as CloseDynamicCmp } from '../../assets/img/close-task-form.svg';\nimport { ReactComponent as GoBackIcon } from '../../assets/img/go-back-label-icon.svg';\nimport { ReactComponent as ChosenColorIcon } from '../../assets/img/label-exist-icon.svg';\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { detailsColorsConsts } from '../../const/board-list-consts';\nimport { labelsColors } from '../../const/board-list-consts';\nimport { updateBoard } from '../../store/board.actions';\nimport { utilService } from '../../services/util.service';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CreateLabel = ({\n  setDynamicType,\n  setIsCreateLabel,\n  setTask,\n  setHideHeader,\n  board,\n  group\n}) => {\n  _s();\n\n  const params = useParams();\n  const taskId = params.taskId;\n  const groupId = params.groupId;\n  const task = group.tasks.find(task => task.id === taskId);\n  const [editInputText, setEditInputText] = useState('');\n  const [selectedEditColor, setSelectedEditColor] = useState('');\n  const dispatch = useDispatch();\n\n  const onLabelSave = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (!selectedEditColor) return;\n    const labelToSave = {\n      id: utilService.makeId(),\n      title: editInputText,\n      color: selectedEditColor\n    };\n    const newLabelIds = [...task.labelIds, labelToSave.id];\n    const taskToUpdate = { ...task,\n      labelIds: newLabelIds\n    };\n    const groupIdx = board.groups.findIndex(currGroup => group.id === currGroup.id);\n    const taskIdx = board.groups[groupIdx].tasks.findIndex(currTask => task.id === currTask.id);\n    board.groups[groupIdx].tasks.splice(taskIdx, 1, taskToUpdate);\n    const boardToUpdate = { ...board,\n      labels: [...board.labels, labelToSave]\n    };\n    dispatch(updateBoard(boardToUpdate)); // setTask(taskToUpdate)\n\n    setHideHeader(true);\n    setIsCreateLabel(false);\n  };\n\n  useEffect(() => {\n    setHideHeader(false);\n  }, []);\n\n  const handleChangeLabelText = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const text = ev.target.value;\n    setEditInputText(text);\n  };\n\n  const handleChangeLabelColor = (color, ev) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    setSelectedEditColor(color);\n  };\n\n  const onGoBack = () => {\n    setIsCreateLabel(false);\n    setHideHeader(true);\n  };\n\n  const selectedColorIcon = color => {\n    if (color === selectedEditColor) return /*#__PURE__*/_jsxDEV(ChosenColorIcon, {\n      className: \"color-chosen-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 49\n    }, this);\n  };\n\n  const onHoverLabel = (ev, color) => {\n    ev.target.style.background = utilService.lightenDarkenColor(color, -10);\n  };\n\n  const onLeaveHoverLabel = (ev, color) => {\n    ev.target.style.background = color;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"edit-label-cmp\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"dynamic-cmp-header\",\n      children: ['Create new label', /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-edit-label-modal\",\n        children: /*#__PURE__*/_jsxDEV(CloseDynamicCmp, {\n          onClick: () => setDynamicType('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-back-label-edit\",\n        children: /*#__PURE__*/_jsxDEV(GoBackIcon, {\n          onClick: onGoBack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"edit-labels-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"edit-label-form\",\n        onSubmit: onLabelSave,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChangeLabelText,\n          type: \"text\",\n          value: editInputText,\n          id: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Select a color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"edit-labels-color-container\",\n          children: labelsColors.map(color => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label-edit-color-box\",\n              onMouseEnter: ev => onHoverLabel(ev, color),\n              onMouseLeave: ev => onLeaveHoverLabel(ev, color),\n              onClick: ev => handleChangeLabelColor(color, ev),\n              style: {\n                backgroundColor: color\n              },\n              children: selectedColorIcon(color)\n            }, color, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"edit-label-btns\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-new-label-btn\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CreateLabel, \"vZu0JmqpgnyTQzJfz9WymNrezXQ=\", false, function () {\n  return [useParams, useDispatch];\n});\n\n_c = CreateLabel;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateLabel\");","map":{"version":3,"sources":["C:/Users/אלדד/Desktop/Sprint4/frontend/src/cmps/dynamic-cmps/create-new-label.jsx"],"names":["ReactComponent","CloseDynamicCmp","GoBackIcon","ChosenColorIcon","useState","useDispatch","useSelector","useParams","detailsColorsConsts","labelsColors","updateBoard","utilService","useEffect","CreateLabel","setDynamicType","setIsCreateLabel","setTask","setHideHeader","board","group","params","taskId","groupId","task","tasks","find","id","editInputText","setEditInputText","selectedEditColor","setSelectedEditColor","dispatch","onLabelSave","ev","preventDefault","stopPropagation","labelToSave","makeId","title","color","newLabelIds","labelIds","taskToUpdate","groupIdx","groups","findIndex","currGroup","taskIdx","currTask","splice","boardToUpdate","labels","handleChangeLabelText","text","target","value","handleChangeLabelColor","onGoBack","selectedColorIcon","onHoverLabel","style","background","lightenDarkenColor","onLeaveHoverLabel","map","backgroundColor"],"mappings":"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","sourcesContent":["import { ReactComponent as CloseDynamicCmp } from '../../assets/img/close-task-form.svg'\r\nimport { ReactComponent as GoBackIcon } from '../../assets/img/go-back-label-icon.svg'\r\nimport { ReactComponent as ChosenColorIcon } from '../../assets/img/label-exist-icon.svg'\r\n\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { detailsColorsConsts } from '../../const/board-list-consts';\r\nimport { labelsColors } from '../../const/board-list-consts';\r\nimport { updateBoard } from '../../store/board.actions';\r\nimport { utilService } from '../../services/util.service'\r\nimport { useEffect } from 'react'\r\n\r\n\r\nexport const CreateLabel = ({ setDynamicType, setIsCreateLabel, setTask, setHideHeader,board,group }) => {\r\n    const params = useParams()\r\n    const taskId = params.taskId\r\n    const groupId = params.groupId\r\n\r\n    const task = group.tasks.find(task => task.id === taskId)\r\n\r\n    const [editInputText, setEditInputText] = useState('')\r\n    const [selectedEditColor, setSelectedEditColor] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onLabelSave = (ev) => {\r\n        \r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n\r\n        if (!selectedEditColor) return\r\n        const labelToSave = {\r\n            id: utilService.makeId(),\r\n            title: editInputText,\r\n            color: selectedEditColor\r\n        }\r\n\r\n        const newLabelIds = [...task.labelIds, labelToSave.id]\r\n        const taskToUpdate = { ...task, labelIds: newLabelIds }\r\n\r\n        const groupIdx = board.groups.findIndex(currGroup => group.id === currGroup.id)\r\n        const taskIdx = board.groups[groupIdx].tasks.findIndex(currTask => task.id === currTask.id)\r\n        \r\n        board.groups[groupIdx].tasks.splice(taskIdx, 1, taskToUpdate)\r\n        const boardToUpdate = { ...board, labels: [...board.labels, labelToSave] }\r\n        dispatch(updateBoard(boardToUpdate))\r\n\r\n        // setTask(taskToUpdate)\r\n        setHideHeader(true)\r\n        setIsCreateLabel(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setHideHeader(false)\r\n        \r\n    }, [])\r\n    \r\n    const handleChangeLabelText = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        \r\n        const text = ev.target.value\r\n        setEditInputText(text)\r\n    }\r\n\r\n    const handleChangeLabelColor = (color,ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n\r\n        setSelectedEditColor(color)\r\n    }\r\n\r\n    const onGoBack = () => {\r\n        setIsCreateLabel(false)\r\n        setHideHeader(true)\r\n    }\r\n\r\n    const selectedColorIcon = (color) => {\r\n        if (color === selectedEditColor) return <ChosenColorIcon className='color-chosen-icon' />\r\n    }\r\n    const onHoverLabel = (ev, color) => {\r\n        ev.target.style.background = utilService.lightenDarkenColor(color, -10);\r\n    }\r\n\r\n    const onLeaveHoverLabel = (ev, color) => {\r\n        ev.target.style.background = color\r\n    }\r\n\r\n    return <section className=\"edit-label-cmp\">\r\n        <section className=\"dynamic-cmp-header\">{'Create new label'}\r\n            <button className='close-edit-label-modal'>\r\n                <CloseDynamicCmp onClick={() => setDynamicType('')} />\r\n            </button>\r\n            <button className='go-back-label-edit'>\r\n                <GoBackIcon onClick={onGoBack} />\r\n            </button>\r\n        </section>\r\n\r\n        <section className='edit-labels-modal'>\r\n            <h4>Name</h4>\r\n            <form className='edit-label-form' onSubmit={onLabelSave}>\r\n                <input onChange={handleChangeLabelText} type='text' value={editInputText} id='' />\r\n                <h4>Select a color</h4>\r\n                <section className='edit-labels-color-container'>\r\n                    {labelsColors.map(color => {\r\n\r\n                        return <div className='label-edit-color-box'\r\n                        onMouseEnter={(ev) => onHoverLabel(ev, color)}\r\n                        onMouseLeave={(ev) => onLeaveHoverLabel(ev, color)}\r\n                        onClick={(ev) => handleChangeLabelColor(color,ev)}\r\n                            key={color}\r\n                            style={{ backgroundColor: color }}>\r\n                                {selectedColorIcon(color)}\r\n                        </div>\r\n                    })}\r\n                </section>\r\n                <section className='edit-label-btns'>\r\n                    <button className='create-new-label-btn'>\r\n                        Create\r\n                    </button>\r\n                </section>\r\n            </form>\r\n        </section>\r\n    </section>\r\n\r\n}"]},"metadata":{},"sourceType":"module"}