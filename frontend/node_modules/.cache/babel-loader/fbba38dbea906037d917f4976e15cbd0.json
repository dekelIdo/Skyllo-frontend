{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dekel\\\\Desktop\\\\Trellor\\\\Sprint4\\\\frontend\\\\src\\\\cmps\\\\dynamic-cmps\\\\members-cmp.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { userService } from \"../../services/user.service\";\nimport { saveTask } from \"../../store/board.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MembersCmp = ({\n  task,\n  setTask,\n  group\n}) => {\n  _s();\n\n  const board = useSelector(state => state.boardModule.board);\n  const members = board.members;\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.userModule.user);\n\n  const onChooseMember = (memberId, ev) => {\n    var _task$memberIds;\n\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (!task.memberIds) task.memberIds = [];\n\n    if (!((_task$memberIds = task.memberIds) !== null && _task$memberIds !== void 0 && _task$memberIds.includes(memberId))) {\n      const newMembersToTask = [...task.memberIds, memberId];\n      const taskToUpdate = { ...task,\n        memberIds: newMembersToTask\n      };\n      setTask(taskToUpdate);\n      dispatch(saveTask(board._id, group.id, taskToUpdate, {\n        text: 'choose member',\n        taskTilte: task.title,\n        taskId: task.id,\n        groupId: group.id,\n        user: user\n      }));\n    } else {\n      const newMemberIds = task.memberIds.filter(currMemberId => currMemberId !== memberId);\n      const taskToUpdate = { ...task,\n        memberIds: newMemberIds\n      };\n      setTask(taskToUpdate);\n      dispatch(saveTask(board._id, group.id, taskToUpdate, 'deleted task'));\n    }\n  };\n\n  const getMemberBackground = member => {\n    // console.log('member:', member)\n    if (member.img) return `url(${member.img}) center center / cover`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"members-cmp\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Board Members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"members-list\",\n      children: members.map(member => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"member-preview\",\n          onClick: ev => onChooseMember(member._id, ev),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar-img-members-cmp\",\n            style: {\n              background: getMemberBackground(member)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: member.fullname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, member.img, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MembersCmp, \"6y1EYFbu16DTiteTstW2uMUdStY=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = MembersCmp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MembersCmp\");","map":{"version":3,"sources":["C:/Users/Dekel/Desktop/Trellor/Sprint4/frontend/src/cmps/dynamic-cmps/members-cmp.jsx"],"names":["useSelector","useDispatch","userService","saveTask","MembersCmp","task","setTask","group","board","state","boardModule","members","dispatch","user","userModule","onChooseMember","memberId","ev","preventDefault","stopPropagation","memberIds","includes","newMembersToTask","taskToUpdate","_id","id","text","taskTilte","title","taskId","groupId","newMemberIds","filter","currMemberId","getMemberBackground","member","img","map","background","fullname"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAGA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAA8B;AAAA;;AAEpD,QAAMC,KAAK,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBF,KAA5B,CAAzB;AACA,QAAMG,OAAO,GAAGH,KAAK,CAACG,OAAtB;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,IAAI,GAAGb,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACK,UAAN,CAAiBD,IAA3B,CAAxB;;AAEA,QAAME,cAAc,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAAA;;AACrCA,IAAAA,EAAE,CAACC,cAAH;AACAD,IAAAA,EAAE,CAACE,eAAH;AACA,QAAG,CAACd,IAAI,CAACe,SAAT,EAAoBf,IAAI,CAACe,SAAL,GAAe,EAAf;;AACpB,QAAI,qBAACf,IAAI,CAACe,SAAN,4CAAC,gBAAgBC,QAAhB,CAAyBL,QAAzB,CAAD,CAAJ,EAAyC;AACrC,YAAMM,gBAAgB,GAAG,CAAC,GAAGjB,IAAI,CAACe,SAAT,EAAoBJ,QAApB,CAAzB;AACA,YAAMO,YAAY,GAAG,EAAE,GAAGlB,IAAL;AAAWe,QAAAA,SAAS,EAAEE;AAAtB,OAArB;AAEAhB,MAAAA,OAAO,CAACiB,YAAD,CAAP;AACAX,MAAAA,QAAQ,CAACT,QAAQ,CAACK,KAAK,CAACgB,GAAP,EAAYjB,KAAK,CAACkB,EAAlB,EAAsBF,YAAtB,EAAoC;AAAEG,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,SAAS,EAAEtB,IAAI,CAACuB,KAAzC;AAAgDC,QAAAA,MAAM,EAAExB,IAAI,CAACoB,EAA7D;AAAgEK,QAAAA,OAAO,EAACvB,KAAK,CAACkB,EAA9E;AAAkFZ,QAAAA,IAAI,EAAEA;AAAxF,OAApC,CAAT,CAAR;AACH,KAND,MAQK;AACD,YAAMkB,YAAY,GAAG1B,IAAI,CAACe,SAAL,CAAeY,MAAf,CAAsBC,YAAY,IAAIA,YAAY,KAAKjB,QAAvD,CAArB;AACA,YAAMO,YAAY,GAAG,EAAE,GAAGlB,IAAL;AAAWe,QAAAA,SAAS,EAAEW;AAAtB,OAArB;AACAzB,MAAAA,OAAO,CAACiB,YAAD,CAAP;AACAX,MAAAA,QAAQ,CAACT,QAAQ,CAACK,KAAK,CAACgB,GAAP,EAAYjB,KAAK,CAACkB,EAAlB,EAAsBF,YAAtB,EAAoC,cAApC,CAAT,CAAR;AACH;AACJ,GAlBD;;AAoBA,QAAMW,mBAAmB,GAAIC,MAAD,IAAY;AACpC;AACA,QAAIA,MAAM,CAACC,GAAX,EAAgB,OAAQ,OAAMD,MAAM,CAACC,GAAI,yBAAzB;AACnB,GAHD;;AAKA,sBAAO;AAAS,IAAA,SAAS,EAAC,aAAnB;AAAA,4BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAEH;AAAS,MAAA,SAAS,EAAC,cAAnB;AAAA,gBACKzB,OAAO,CAAC0B,GAAR,CAAaF,MAAD,IAAY;AACrB,4BACI;AAAsB,UAAA,SAAS,EAAC,gBAAhC;AACI,UAAA,OAAO,EAAGlB,EAAD,IAAQF,cAAc,CAACoB,MAAM,CAACX,GAAR,EAAaP,EAAb,CADnC;AAAA,kCAGI;AAAK,YAAA,SAAS,EAAC,wBAAf;AACI,YAAA,KAAK,EAAE;AAAEqB,cAAAA,UAAU,EAAEJ,mBAAmB,CAACC,MAAD;AAAjC;AADX;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAOI;AAAA,sBAAIA,MAAM,CAACI;AAAX;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA,WAAUJ,MAAM,CAACC,GAAjB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAYH,OAbA;AADL;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAqBH,CArDM;;GAAMhC,U;UAEKJ,W,EAEGC,W,EACJD,W;;;KALJI,U","sourcesContent":["import { useSelector } from \"react-redux\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { userService } from \"../../services/user.service\"\r\nimport { saveTask } from \"../../store/board.actions\"\r\n\r\n\r\nexport const MembersCmp = ({ task, setTask, group }) => {\r\n\r\n    const board = useSelector(state => state.boardModule.board)\r\n    const members = board.members\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.userModule.user)\r\n\r\n    const onChooseMember = (memberId, ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        if(!task.memberIds) task.memberIds=[]\r\n        if (!task.memberIds?.includes(memberId)) {\r\n            const newMembersToTask = [...task.memberIds, memberId]\r\n            const taskToUpdate = { ...task, memberIds: newMembersToTask }\r\n            \r\n            setTask(taskToUpdate)\r\n            dispatch(saveTask(board._id, group.id, taskToUpdate, { text: 'choose member', taskTilte: task.title, taskId: task.id,groupId:group.id, user: user }))\r\n        }\r\n        \r\n        else {\r\n            const newMemberIds = task.memberIds.filter(currMemberId => currMemberId !== memberId)\r\n            const taskToUpdate = { ...task, memberIds: newMemberIds }\r\n            setTask(taskToUpdate)\r\n            dispatch(saveTask(board._id, group.id, taskToUpdate, 'deleted task'))\r\n        }\r\n    }\r\n\r\n    const getMemberBackground = (member) => {\r\n        // console.log('member:', member)\r\n        if (member.img) return `url(${member.img}) center center / cover`\r\n    }\r\n\r\n    return <section className=\"members-cmp\">\r\n        <h3>Board Members</h3>\r\n        <section className=\"members-list\">\r\n            {members.map((member) => {\r\n                return (\r\n                    <div key={member.img} className=\"member-preview\"\r\n                        onClick={(ev) => onChooseMember(member._id, ev)}\r\n                    >\r\n                        <div className=\"avatar-img-members-cmp\"\r\n                            style={{ background: getMemberBackground(member) }}\r\n                        >\r\n                        </div>\r\n                        <p>{member.fullname}</p>\r\n                    </div>\r\n\r\n                )\r\n            })}\r\n\r\n        </section>\r\n    </section>\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}