{"ast":null,"code":"import { storageService } from './async-storage.service'; // import { httpService } from './http.service'\n\nimport { store } from '../store/store';\nimport { getActionSetWatchedUser } from '../store/review.actions';\nimport { socketService, SOCKET_EVENT_USER_UPDATED, SOCKET_EMIT_USER_WATCH } from './socket.service';\nimport { showSuccessMsg } from '../services/event-bus.service';\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser';\nexport const userService = {\n  login,\n  logout,\n  signup,\n  getLoggedinUser,\n  saveLocalUser,\n  getUsers,\n  getById,\n  remove,\n  update,\n  changeScore,\n  getUsers,\n  getMembers\n};\nwindow.userService = userService;\n\nfunction getUsers() {\n  return storageService.query('user'); // return httpService.get(`user`)\n}\n\nfunction onUserUpdate(user) {\n  showSuccessMsg(`This user ${user.fullname} just got updated from socket, new score: ${user.score}`);\n  store.dispatch(getActionSetWatchedUser(user));\n}\n\nasync function getById(userId) {\n  const user = await storageService.get('user', userId); // const user = await httpService.get(`user/${userId}`)\n\n  socketService.emit(SOCKET_EMIT_USER_WATCH, userId);\n  socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate);\n  socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate);\n  return user;\n}\n\nfunction remove(userId) {\n  return storageService.remove('user', userId); // return httpService.delete(`user/${userId}`)\n}\n\nasync function update(user) {\n  await storageService.put('user', user); // user = await httpService.put(`user/${user._id}`, user)\n  // Handle case in which admin updates other user's details\n\n  if (getLoggedinUser()._id === user._id) saveLocalUser(user);\n  return user;\n}\n\nasync function login(userCred) {\n  const users = await storageService.query('user');\n  const user = users.find(user => user.username === userCred.username); // const user = await httpService.post('auth/login', userCred)\n\n  if (user) {\n    socketService.login(user._id);\n    return saveLocalUser(user);\n  }\n}\n\nasync function signup(userCred) {\n  console.log('userCred service:', userCred);\n  const user = await storageService.post('user', userCred); // const user = await httpService.post('auth/signup', userCred)\n\n  socketService.login(user._id);\n  return saveLocalUser(user);\n}\n\nasync function logout() {\n  sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER);\n  socketService.logout(); // return await httpService.post('auth/logout')\n}\n\nasync function changeScore(by) {\n  const user = getLoggedinUser();\n  if (!user) throw new Error('Not loggedin');\n  user.score = user.score + by || by;\n  await update(user);\n  return user.score;\n}\n\nfunction saveLocalUser(user) {\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user));\n  return user;\n}\n\nfunction getLoggedinUser() {\n  return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN_USER));\n} // ;(async ()=>{\n//     await userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 10000, isAdmin: false})\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\n// })()\n\n\nfunction getMembers() {\n  return gUsers;\n}\n\nconst gUsers = [{\n  _id: '1011',\n  fullname: 'Eldad Yikne',\n  img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583512/sprint%204%20/T03E3RZ2KHV-U03GZ4S8P7C-0dcebbbdbc4f-512_tlntp4.jpg\n        `\n}, {\n  _id: '1012',\n  fullname: 'Dekel Ido',\n  img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583549/sprint%204%20/T03E3RZ2KHV-U03KC7A8R6F-97b018241b8a-512_ougkz6.jpg\n        `\n}, {\n  _id: '1013',\n  fullname: 'Yaara Yehuda',\n  img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583460/sprint%204%20/T03E3RZ2KHV-U03KVHTDXAR-77f29bd19fdf-512_vqrj3l.jpg\n        `\n}, {\n  _id: '1014',\n  fullname: 'Roi Yotvat',\n  img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583580/sprint%204%20/T03E3RZ2KHV-U03HE9ZJTA6-79c26a7781c8-512_m1ydbz.png\n        `\n}];","map":{"version":3,"sources":["C:/Users/Dekel/Desktop/Trellor/Sprint4/frontend/src/services/user.service.js"],"names":["storageService","store","getActionSetWatchedUser","socketService","SOCKET_EVENT_USER_UPDATED","SOCKET_EMIT_USER_WATCH","showSuccessMsg","STORAGE_KEY_LOGGEDIN_USER","userService","login","logout","signup","getLoggedinUser","saveLocalUser","getUsers","getById","remove","update","changeScore","getMembers","window","query","onUserUpdate","user","fullname","score","dispatch","userId","get","emit","off","on","put","_id","userCred","users","find","username","console","log","post","sessionStorage","removeItem","by","Error","setItem","JSON","stringify","parse","getItem","gUsers","img"],"mappings":"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","sourcesContent":["import { storageService } from './async-storage.service'\r\n// import { httpService } from './http.service'\r\nimport { store } from '../store/store'\r\nimport { getActionSetWatchedUser } from '../store/review.actions'\r\nimport { socketService, SOCKET_EVENT_USER_UPDATED, SOCKET_EMIT_USER_WATCH } from './socket.service'\r\nimport { showSuccessMsg } from '../services/event-bus.service'\r\n\r\n\r\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser'\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getLoggedinUser,\r\n    saveLocalUser,\r\n    getUsers,\r\n    getById,\r\n    remove,\r\n    update,\r\n    changeScore,\r\n    getUsers,\r\n    getMembers\r\n}\r\n\r\nwindow.userService = userService\r\n\r\nfunction getUsers() {\r\n    return storageService.query('user')\r\n    // return httpService.get(`user`)\r\n}\r\n\r\nfunction onUserUpdate(user) {\r\n    showSuccessMsg(`This user ${user.fullname} just got updated from socket, new score: ${user.score}`)\r\n    store.dispatch(getActionSetWatchedUser(user))\r\n}\r\n\r\nasync function getById(userId) {\r\n    const user = await storageService.get('user', userId)\r\n    // const user = await httpService.get(`user/${userId}`)\r\n\r\n    socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\r\n    socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n    socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n\r\n    return user\r\n}\r\nfunction remove(userId) {\r\n    return storageService.remove('user', userId)\r\n    // return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update(user) {\r\n    await storageService.put('user', user)\r\n    // user = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === user._id) saveLocalUser(user)\r\n    return user;\r\n}\r\n\r\nasync function login(userCred) {\r\n    const users = await storageService.query('user')\r\n    const user = users.find(user => user.username === userCred.username)\r\n    // const user = await httpService.post('auth/login', userCred)\r\n    if (user) {\r\n        socketService.login(user._id)\r\n        return saveLocalUser(user)\r\n    }\r\n}\r\n\r\n\r\nasync function signup(userCred) {\r\n    console.log('userCred service:', userCred)\r\n\r\n    const user = await storageService.post('user', userCred)\r\n    // const user = await httpService.post('auth/signup', userCred)\r\n    socketService.login(user._id)\r\n    return saveLocalUser(user)\r\n}\r\nasync function logout() {\r\n    sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER)\r\n    socketService.logout()\r\n    // return await httpService.post('auth/logout')\r\n}\r\n\r\nasync function changeScore(by) {\r\n    const user = getLoggedinUser()\r\n    if (!user) throw new Error('Not loggedin')\r\n    user.score = user.score + by || by\r\n    await update(user)\r\n    return user.score\r\n}\r\n\r\n\r\nfunction saveLocalUser(user) {\r\n    sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN_USER))\r\n}\r\n\r\n// ;(async ()=>{\r\n//     await userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 10000, isAdmin: false})\r\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\r\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\r\n// })()\r\nfunction getMembers() {\r\n    return gUsers\r\n}\r\n\r\nconst gUsers = [\r\n    {\r\n        _id: '1011',\r\n        fullname: 'Eldad Yikne',\r\n        img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583512/sprint%204%20/T03E3RZ2KHV-U03GZ4S8P7C-0dcebbbdbc4f-512_tlntp4.jpg\r\n        `\r\n    },\r\n    {\r\n        _id: '1012',\r\n        fullname: 'Dekel Ido',\r\n        img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583549/sprint%204%20/T03E3RZ2KHV-U03KC7A8R6F-97b018241b8a-512_ougkz6.jpg\r\n        `\r\n    },\r\n    {\r\n        _id: '1013',\r\n        fullname: 'Yaara Yehuda',\r\n        img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583460/sprint%204%20/T03E3RZ2KHV-U03KVHTDXAR-77f29bd19fdf-512_vqrj3l.jpg\r\n        `\r\n    },\r\n    {\r\n        _id: '1014',\r\n        fullname: 'Roi Yotvat',\r\n        img: `https://res.cloudinary.com/dwdpgwxqv/image/upload/v1663583580/sprint%204%20/T03E3RZ2KHV-U03HE9ZJTA6-79c26a7781c8-512_m1ydbz.png\r\n        `\r\n    },\r\n]\r\n\r\n"]},"metadata":{},"sourceType":"module"}